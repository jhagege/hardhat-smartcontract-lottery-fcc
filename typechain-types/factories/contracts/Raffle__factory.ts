/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__RaffleNotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__SendMoreToEnterRaffle",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpkeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getSubscriptionId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101406040523480156200001257600080fd5b50604051620018a7380380620018a78339818101604052810190620000389190620001ab565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508261012081815250508467ffffffffffffffff1660c08167ffffffffffffffff1660c01b81525050816002819055506000600460006101000a81548160ff02191690836001811115620001085762000107620002b3565b5b0217905550426000819055508063ffffffff166101008163ffffffff1660e01b8152505050505050505062000369565b6000815190506200014981620002e7565b92915050565b600081519050620001608162000301565b92915050565b60008151905062000177816200031b565b92915050565b6000815190506200018e8162000335565b92915050565b600081519050620001a5816200034f565b92915050565b60008060008060008060c08789031215620001cb57620001ca620002e2565b5b6000620001db89828a0162000138565b9650506020620001ee89828a0162000194565b95505060406200020189828a016200014f565b94505060606200021489828a0162000166565b93505060806200022789828a0162000166565b92505060a06200023a89828a016200017d565b9150509295509295509295565b6000620002548262000265565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f28162000247565b8114620002fe57600080fd5b50565b6200030c816200025b565b81146200031857600080fd5b50565b620003268162000285565b81146200033257600080fd5b50565b62000340816200028f565b81146200034c57600080fd5b50565b6200035a816200029f565b81146200036657600080fd5b50565b60805160601c60a05160601c60c05160c01c60e0516101005160e01c610120516114cd620003da600039600081816107f701526108a0015260006106a60152600061066201526000818161068301526108d10152600061062601526000818161035f01526103b301526114cd6000f3fe6080604052600436106100dd5760003560e01c80635f1b0fd81161007f578063c1c244e811610059578063c1c244e81461027e578063de3d9fb7146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b80635f1b0fd8146101ea5780636e04ff0d1461021557806391ad27b414610253576100dd565b80632cfcc539116100bb5780632cfcc539146101615780634585e33b1461016b578063473f1ddc1461019457806353a2c19a146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b60405161010491906110d3565b60405180910390f35b34801561011957600080fd5b50610122610346565b60405161012f91906110b8565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610eac565b61035d565b005b61016961041d565b005b34801561017757600080fd5b50610192600480360381019061018d9190610dbc565b61056e565b005b3480156101a057600080fd5b506101a961076e565b6040516101b69190610ff1565b60405180910390f35b3480156101cb57600080fd5b506101d4610798565b6040516101e191906110d3565b60405180910390f35b3480156101f657600080fd5b506101ff6107a7565b60405161020c91906110d3565b60405180910390f35b34801561022157600080fd5b5061023c60048036038101906102379190610e09565b6107b4565b60405161024a929190611035565b60405180910390f35b34801561025f57600080fd5b5061026861089c565b60405161027591906110d3565b60405180910390f35b34801561028a57600080fd5b506102936108c4565b6040516102a091906110d3565b60405180910390f35b3480156102b557600080fd5b506102be6108cd565b6040516102cb91906110d3565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f69190610e52565b6108ff565b6040516103089190610ff1565b60405180910390f35b34801561031d57600080fd5b50610326610947565b60405161033391906110d3565b60405180910390f35b6000600254905090565b6000600460009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040f57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161040692919061100c565b60405180910390fd5b6104198282610954565b5050565b600254341015610459576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046d5761046c6113ad565b5b600460009054906101000a900460ff16600181111561048f5761048e6113ad565b5b146104c6576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000610588604051806020016040528060008152506107b4565b509050806105f75747600380549050600460009054906101000a900460ff1660018111156105b9576105b86113ad565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105ee939291906110ee565b60405180910390fd5b6001600460006101000a81548160ff0219169083600181111561061d5761061c6113ad565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106e7959493929190611065565b602060405180830381600087803b15801561070157600080fd5b505af1158015610715573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107399190610e7f565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600460009054906101000a900460ff1660018111156107dc576107db6113ad565b5b600060018111156107f0576107ef6113ad565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006000544261082491906111ce565b119050600080600380549050119050600080471190508280156108445750835b801561084d5750805b80156108565750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b60007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16905090565b600060038281548110610915576109146113dc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600380549050905090565b6000600380549050826000815181106109705761096f6113dc565b5b6020026020010151610982919061131e565b905060006003828154811061099a576109996113dc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a2357610a2261140b565b5b604051908082528060200260200182016040528015610a515781602001602082028036833780820191505090505b5060039080519060200190610a67929190610b87565b506000600460006101000a81548160ff02191690836001811115610a8e57610a8d6113ad565b5b02179055504260008190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610ac090610fdc565b60006040518083038185875af1925050503d8060008114610afd576040519150601f19603f3d011682016040523d82523d6000602084013e610b02565b606091505b5050905080610b3d576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c00579160200282015b82811115610bff5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ba7565b5b509050610c0d9190610c11565b5090565b5b80821115610c2a576000816000905550600101610c12565b5090565b6000610c41610c3c8461114a565b611125565b90508083825260208201905082856020860282011115610c6457610c63611444565b5b60005b85811015610c945781610c7a8882610d92565b845260208401935060208301925050600181019050610c67565b5050509392505050565b6000610cb1610cac84611176565b611125565b905082815260208101848484011115610ccd57610ccc611449565b5b610cd88482856112ab565b509392505050565b600082601f830112610cf557610cf461143f565b5b8135610d05848260208601610c2e565b91505092915050565b60008083601f840112610d2457610d2361143f565b5b8235905067ffffffffffffffff811115610d4157610d4061143a565b5b602083019150836001820283011115610d5d57610d5c611444565b5b9250929050565b600082601f830112610d7957610d7861143f565b5b8135610d89848260208601610c9e565b91505092915050565b600081359050610da181611480565b92915050565b600081519050610db681611480565b92915050565b60008060208385031215610dd357610dd2611453565b5b600083013567ffffffffffffffff811115610df157610df061144e565b5b610dfd85828601610d0e565b92509250509250929050565b600060208284031215610e1f57610e1e611453565b5b600082013567ffffffffffffffff811115610e3d57610e3c61144e565b5b610e4984828501610d64565b91505092915050565b600060208284031215610e6857610e67611453565b5b6000610e7684828501610d92565b91505092915050565b600060208284031215610e9557610e94611453565b5b6000610ea384828501610da7565b91505092915050565b60008060408385031215610ec357610ec2611453565b5b6000610ed185828601610d92565b925050602083013567ffffffffffffffff811115610ef257610ef161144e565b5b610efe85828601610ce0565b9150509250929050565b610f1181611202565b82525050565b610f2081611214565b82525050565b610f2f81611220565b82525050565b6000610f40826111a7565b610f4a81856111b2565b9350610f5a8185602086016112ba565b610f6381611458565b840191505092915050565b610f7781611299565b82525050565b6000610f8a6000836111c3565b9150610f9582611469565b600082019050919050565b610fa98161123d565b82525050565b610fb88161126b565b82525050565b610fc781611275565b82525050565b610fd681611285565b82525050565b6000610fe782610f7d565b9150819050919050565b60006020820190506110066000830184610f08565b92915050565b60006040820190506110216000830185610f08565b61102e6020830184610f08565b9392505050565b600060408201905061104a6000830185610f17565b818103602083015261105c8184610f35565b90509392505050565b600060a08201905061107a6000830188610f26565b6110876020830187610fcd565b6110946040830186610fa0565b6110a16060830185610fbe565b6110ae6080830184610fbe565b9695505050505050565b60006020820190506110cd6000830184610f6e565b92915050565b60006020820190506110e86000830184610faf565b92915050565b60006060820190506111036000830186610faf565b6111106020830185610faf565b61111d6040830184610faf565b949350505050565b600061112f611140565b905061113b82826112ed565b919050565b6000604051905090565b600067ffffffffffffffff8211156111655761116461140b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111915761119061140b565b5b61119a82611458565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006111d98261126b565b91506111e48361126b565b9250828210156111f7576111f661134f565b5b828203905092915050565b600061120d8261124b565b9050919050565b60008115159050919050565b6000819050919050565b60008190506112388261146c565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006112a48261122a565b9050919050565b82818337600083830152505050565b60005b838110156112d85780820151818401526020810190506112bd565b838111156112e7576000848401525b50505050565b6112f682611458565b810181811067ffffffffffffffff821117156113155761131461140b565b5b80604052505050565b60006113298261126b565b91506113348361126b565b9250826113445761134361137e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061147d5761147c6113ad565b5b50565b6114898161126b565b811461149457600080fd5b5056fea264697066735822122014e870cf1be3f9e45bcbdd3d649f888065993858a0a222852c7bc1cb55b367f164736f6c63430008070033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinatorV2: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    interval: PromiseOrValue<BigNumberish>,
    entranceFee: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinatorV2,
      subscriptionId,
      gasLane,
      interval,
      entranceFee,
      callbackGasLimit,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    vrfCoordinatorV2: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    interval: PromiseOrValue<BigNumberish>,
    entranceFee: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      subscriptionId,
      gasLane,
      interval,
      entranceFee,
      callbackGasLimit,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
